/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.serializer;

import com.google.inject.Inject;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Block;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.ConcurrLangPackage;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Fork;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Join;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Model;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.services.ConcurrLangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ConcurrLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConcurrLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ConcurrLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConcurrLangPackage.ACTION:
				sequence_Action(context, (fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Action) semanticObject); 
				return; 
			case ConcurrLangPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case ConcurrLangPackage.FORK:
				sequence_Fork(context, (Fork) semanticObject); 
				return; 
			case ConcurrLangPackage.JOIN:
				sequence_Join(context, (Join) semanticObject); 
				return; 
			case ConcurrLangPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statements returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Action(ISerializationContext context, fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConcurrLangPackage.Literals.STATEMENTS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConcurrLangPackage.Literals.STATEMENTS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     statements+=Statements+
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns Fork
	 *     Fork returns Fork
	 *
	 * Constraint:
	 *     (name=ID forkedBlocks+=Block+)
	 */
	protected void sequence_Fork(ISerializationContext context, Fork semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns Join
	 *     Join returns Join
	 *
	 * Constraint:
	 *     (name=ID? fork=[Fork|ID])
	 */
	protected void sequence_Join(ISerializationContext context, Join semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     statements+=Statements+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
