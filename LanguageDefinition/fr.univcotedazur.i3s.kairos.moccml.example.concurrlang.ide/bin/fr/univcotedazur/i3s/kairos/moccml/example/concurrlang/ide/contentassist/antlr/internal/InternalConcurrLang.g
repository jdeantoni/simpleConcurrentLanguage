/*
 * generated by Xtext 2.25.0
 */
grammar InternalConcurrLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.services.ConcurrLangGrammarAccess;

}
@parser::members {
	private ConcurrLangGrammarAccess grammarAccess;

	public void setGrammarAccess(ConcurrLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStatementsAssignment()); }
		(rule__Model__StatementsAssignment)*
		{ after(grammarAccess.getModelAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatements
entryRuleStatements
:
{ before(grammarAccess.getStatementsRule()); }
	 ruleStatements
{ after(grammarAccess.getStatementsRule()); } 
	 EOF 
;

// Rule Statements
ruleStatements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementsAccess().getGroup()); }
		(rule__Statements__Group__0)
		{ after(grammarAccess.getStatementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJoin
entryRuleJoin
:
{ before(grammarAccess.getJoinRule()); }
	 ruleJoin
{ after(grammarAccess.getJoinRule()); } 
	 EOF 
;

// Rule Join
ruleJoin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJoinAccess().getGroup()); }
		(rule__Join__Group__0)
		{ after(grammarAccess.getJoinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFork
entryRuleFork
:
{ before(grammarAccess.getForkRule()); }
	 ruleFork
{ after(grammarAccess.getForkRule()); } 
	 EOF 
;

// Rule Fork
ruleFork 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForkAccess().getGroup()); }
		(rule__Fork__Group__0)
		{ after(grammarAccess.getForkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getNameAssignment()); }
		(rule__Action__NameAssignment)
		{ after(grammarAccess.getActionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementsAccess().getActionParserRuleCall_0_0()); }
		ruleAction
		{ after(grammarAccess.getStatementsAccess().getActionParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getForkParserRuleCall_0_1()); }
		ruleFork
		{ after(grammarAccess.getStatementsAccess().getForkParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementsAccess().getJoinParserRuleCall_0_2()); }
		ruleJoin
		{ after(grammarAccess.getStatementsAccess().getJoinParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group__0__Impl
	rule__Statements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getAlternatives_0()); }
	(rule__Statements__Alternatives_0)
	{ after(grammarAccess.getStatementsAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statements__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementsAccess().getSemicolonKeyword_1()); }
	(';')?
	{ after(grammarAccess.getStatementsAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group__0__Impl
	rule__Join__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getGroup_0()); }
	(rule__Join__Group_0__0)?
	{ after(grammarAccess.getJoinAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group__1__Impl
	rule__Join__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getJoinKeyword_1()); }
	'join'
	{ after(grammarAccess.getJoinAccess().getJoinKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group__2__Impl
	rule__Join__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2()); }
	('(')?
	{ after(grammarAccess.getJoinAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group__3__Impl
	rule__Join__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getForkAssignment_3()); }
	(rule__Join__ForkAssignment_3)
	{ after(grammarAccess.getJoinAccess().getForkAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4()); }
	(')')?
	{ after(grammarAccess.getJoinAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Join__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group_0__0__Impl
	rule__Join__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getNameAssignment_0_0()); }
	(rule__Join__NameAssignment_0_0)
	{ after(grammarAccess.getJoinAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Join__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJoinAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getJoinAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Fork__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fork__Group__0__Impl
	rule__Fork__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForkAccess().getForkKeyword_0()); }
	'fork'
	{ after(grammarAccess.getForkAccess().getForkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fork__Group__1__Impl
	rule__Fork__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForkAccess().getNameAssignment_1()); }
	(rule__Fork__NameAssignment_1)
	{ after(grammarAccess.getForkAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fork__Group__2__Impl
	rule__Fork__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForkAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getForkAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Fork__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getForkAccess().getForkedBlocksAssignment_3()); }
		(rule__Fork__ForkedBlocksAssignment_3)
		{ after(grammarAccess.getForkAccess().getForkedBlocksAssignment_3()); }
	)
	(
		{ before(grammarAccess.getForkAccess().getForkedBlocksAssignment_3()); }
		(rule__Fork__ForkedBlocksAssignment_3)*
		{ after(grammarAccess.getForkAccess().getForkedBlocksAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getBlockAccess().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	('->')?
	{ after(grammarAccess.getBlockAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
	rule__Block__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_3()); }
		(rule__Block__StatementsAssignment_3)
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getBlockAccess().getStatementsAssignment_3()); }
		(rule__Block__StatementsAssignment_3)*
		{ after(grammarAccess.getBlockAccess().getStatementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsStatementsParserRuleCall_0()); }
		ruleStatements
		{ after(grammarAccess.getModelAccess().getStatementsStatementsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoinAccess().getNameIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getJoinAccess().getNameIDTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Join__ForkAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoinAccess().getForkForkCrossReference_3_0()); }
		(
			{ before(grammarAccess.getJoinAccess().getForkForkIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getJoinAccess().getForkForkIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getJoinAccess().getForkForkCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForkAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getForkAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Fork__ForkedBlocksAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForkAccess().getForkedBlocksBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getForkAccess().getForkedBlocksBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementsStatementsParserRuleCall_3_0()); }
		ruleStatements
		{ after(grammarAccess.getBlockAccess().getStatementsStatementsParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
