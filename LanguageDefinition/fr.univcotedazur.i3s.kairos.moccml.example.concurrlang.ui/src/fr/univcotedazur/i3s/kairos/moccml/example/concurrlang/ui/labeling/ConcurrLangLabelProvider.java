/*
 * generated by Xtext 2.25.0
 */
package fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.ui.labeling;

import com.google.inject.Inject;

import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Action;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Block;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Fork;
import fr.univcotedazur.i3s.kairos.moccml.example.concurrlang.concurrLang.Join;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class ConcurrLangLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ConcurrLangLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	String text(Block ele) {
		if (((Fork)ele.eContainer()).getParent() == ele){
			return "parent block";
		}else {
			return "child block";
		}
	}
	String text(Join ele) {
		return "Join "+ele.getFork().getName();
	}
	
	String text(Action ele) {
		return "Action "+ele.getName();
	}
	
	String text(Fork ele) {
		return "Fork "+ele.getName();
	}
//
//	String image(Greeting ele) {
//		return "Greeting.gif";
//	}
}
